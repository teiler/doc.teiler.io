FORMAT: 1A
HOST: http://api.teiler.io/v1

# tylr

tylr is a tool to split expenses in groups

Throughout this document, you'll find error responses defined on a per-resource basis. Their description is based on the following schema:

* Textual description
  * Applicable operations (POST, GET, PUT, DELETE)
  * HTTP Status Code
  * The JSON response that is delivered, consisting of a constant error code you may check against.

On all requests, the following errors may happen:

* Not authorized to a group
  * All operations (except "Create a new group" and "Log into a group"
  * HTTP 401
  * JSON: ``"error-code": "NOT_AUTHORIZED_TO_GROUP"``
* Server error
  * All operations
  * HTTP 500
  * JSON: ``"error-code": "GENERAL_SERVER_ERROR"``

The enumeration values for ``currency`` are currently:
* ``CHF``
* ``EUR``

All time values follow the ISO time format standard [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).

# Groups [/group]

A tool is a collection of people and their expenses and compensations.

The following errors may happen at the applicable operations:

* Group ID is not found
  * POST (Login)
  * HTTP 404
  * JSON: ``"error-code": "GROUP_NOT_FOUND"``
* The group needs an access code and the one given is wrong or missing
  * POST (Login)
  * HTTP 403
  * JSON: ``"error-code": "ACCESS_CODE_WRONG"``
* The person IDs given do not belong to the group
  * PUT
  * HTTP 406
  * JSON: ``"error-code": "PERSON_NOT_IN_GROUP"``
* The person names clash in this group
  * PUT
  * HTTP 409
  * JSON: ``"error-code": "PEOPLE_NAME_CONFLICT"``
* The currency does not fit to the enum values
  * PUT
  * HTTP 416
  * JSON: ``"error-code": "CURRENCY_NOT_VALID"``
* The access code is too short or too long
  * PUT
  * HTTP 411
  * JSON: ``"error-code": "ACCESS_CODE_WRONG_LENGTH"``

## Create a new group [POST]

+ Request (application/json)

        {
            "name": "Group name", 
        }

+ Response 200

        {
            "group-uuid": "Group UUID",
            "name": "Group name",
        }


## View a group [GET]

+ Response 200


        {
            "name": "Group name",
            "access-code": (integer, optional) "Access code"
            "people": [
                {
                    "id": (integer) "Person ID",
                    "name": "Person Name"
                }, ...
            ],
            "currency": (enum[currency]) "Default currency",
        }

## Edit a group [PUT]

The backend implements the following behavior concerning people's IDs and names:

* If an ID is given and it belongs to the group already, the name of the person gets changed
* If the ID is not given, a new person gets created and associated with the group.

+ Request (application/json)
        
        {
            "name": "Group name",
            "access-code": (integer, optional) "Access code",
            "people": [
                {
                    "id": (integer) "Person ID",
                    "name": "Person Name"
                }, ...
            ],
            "currency": (enum[currency]) "Default currency"
        }
        
+ Response 200

## Delete a group [DELETE]

+ Response 200

## Log into a group [POST /group/login]

+ Request (application/json)
        
        {
            "group-uuid": "Group UUID",
            "access-code": (integer, optional) "Access code",
        }
        
+ Response 200

# Expense [/expense]

An expense is something one person bought and is shared with other people. The payer can decide who profits from that and can even set how much each one profits.

The following errors may happen at the applicable operations:

* Factors dont add up to 1
  * POST, PUT
  * HTTP 406
  * JSON: ``"error-code": "FACTORS_DONT_ADD_UP"``
* Transaction ID, Payer ID or Profiteer ID is not found
  * POST (Payer ID, Profiteer ID), GET (Transaction ID), PUT (all)
  * HTTP 404
  * JSON
    * ``"error-code": "TRANSACTION_NOT_FOUND"``
    * ``"error-code": "PAYER_NOT_FOUND"``
    * ``"error-code": "PROFITEER_NOT_FOUND"``
* Transaction ID, Payer ID or Profiteer ID do not belong to current group
  * POST (Payer ID, Profiteer ID), GET (Transaction ID), PUT (all)
  * HTTP 403
  * JSON
    * ``"error-code": "TRANSACTION_NOT_IN_GROUP"``
    * ``"error-code": "PAYER_NOT_IN_GROUP"``
    * ``"error-code": "PROFITEER_NOT_IN_GROUP"``


## Create an expense [POST]

+ Request (application/json)

        {
            "title": "Title",
            "amount": (integer) "Amount in Rappen/Cents",
            "payer": (integer) "ID of the payer",
            "profiteers": [
                {
                    "id": (integer) "Profiteer ID",
                    "factor": (float) "Percentage between 0 and 1.0 of the whole amount",
                }, ...
            ],
        }
        
+ Response 200

        {
            "expense-id": "Expense ID"
        }
        
## View an expense [GET /expense/{expenseid}]

+ Parameters
    + expenseid (integer) - ID of the expense

+ Response 200
        
        {
            "title": "Title",
            "amount": (integer) "Amount in Rappen/Cents",
            "payer": (integer) "ID of the payer",
            "payer-name": "Name of the payer",
            "profiteers": [
                {
                    "id": (integer) "Profiteer ID",
                    "name": "Profiteer Name"
                    "factor": (float) "Percentage between 0 and 1.0 of the whole amount",
                }, ...
            ],
            "create-time": (datetime) "Create time",
            "update-time": (datetime) "Update Time"
        }
        
## Edit an expense [PUT /expense/{expenseid}]

+ Parameters
    + expenseid (integer) - ID of the expense

+ Request (application/json)

        {
            "title": "Title",
            "amount": (integer) "Amount in Rappen/Cents",
            "payer": (integer) "ID of the payer",
            "profiteers": [
                {
                    "id": (integer) "Profiteer ID",
                    "factor": (float) "Percentage between 0 and 1.0 of the whole amount",
                }, ...
            ],
        }
        
+ Response 200

## Delete an expense [DELETE /expense/{expenseid}]

+ Parameters
    + expenseid (integer) - ID of the expense
        
+ Response 200

        
# Compensation [/compensation]

A compensation is a payment that is recorded in tylr. It basically follows the Expense model, except there's just one profiteer.

The following errors may happen at the applicable operations:

* Transaction ID, Payer ID or Profiteer ID is not found
  * POST (Payer ID, Profiteer ID), GET (Transaction ID), PUT (all)
  * HTTP 404
  * JSON
    * ``"error-code": "TRANSACTION_NOT_FOUND"``
    * ``"error-code": "PAYER_NOT_FOUND"``
    * ``"error-code": "PROFITEER_NOT_FOUND"``
* Transaction ID, Payer ID or Profiteer ID do not belong to current group
  * POST (Payer ID, Profiteer ID), GET (Transaction ID), PUT (all)
  * HTTP 403
  * JSON
    * ``"error-code": "TRANSACTION_NOT_IN_GROUP"``
    * ``"error-code": "PAYER_NOT_IN_GROUP"``
    * ``"error-code": "PROFITEER_NOT_IN_GROUP"``

## Create a compensation [POST]

+ Request (application/json)

        {
            "title": "Title",
            "amount": (integer) "Amount in Rappen/Cents",
            "payer": (integer) "ID of the payer",
            "profiteer": (integer) "ID of the profiteer",
        }
        
+ Response 200

        {
            "compensation-id": "Compensation ID"
        }

        
## View a compensation [GET /compensation/{compensationid}]

+ Parameters
    + compensationid (integer) - ID of the compensation

+ Response 200
        
        {
            "title": "Title",
            "amount": (integer) "Amount in Rappen/Cents",
            "payer": (integer) "ID of the payer",
            "payer-name": "Name of the payer",
            "profiteer": (integer) "ID of the profiteer",
            "profiteer-name:" "Name of the profiteer",
            "create-time": (datetime) "Create time",
            "update-time": (datetime) "Update Time",
        }
        
## Edit a compensation [PUT /compensation/{compensationid}]

+ Parameters
    + compensationid (integer) - ID of the compensation

+ Request (application/json)

        {
            "title": "Title",
            "amount": (integer) "Amount in Rappen/Cents",
            "payer": (integer) "ID of the payer",
            "profiteer": (integer) "ID of the profiteer",
        }
        
+ Response 200
        
## Delete a compensation [DELETE /compensation/{compensationid}]

+ Parameters
    + compensationid (integer) - ID of the compensation
        
+ Response 200

# Group Debt
        
## Debt [/debt]

Shows the debt to the group with the concept of a balance.

* A positive value means, the person has a credit on the group (the group owes this person)
* A negative value means, the person has a debt on the group (he/she owes the group)

### View Debts [GET]
+ Response 200

        [

            {
                "id": (integer) "ID of the person",
                "name": "Name of the person",
                "balance": (integer) "Balance of the person in Rappen/Cents",
            }, ...
        ]
        
## Settle up [/settleup]

Shows suggested compensations between group members. They're formatted as multiple compensations, so you could re-use them when the user wants to quickly settle up.

### View Settle Up [GET]

+ Response 200

        [
            {
                "title": "Title",
                "amount": (integer) "Amount in Rappen/Cents",
                "payer": (integer) "ID of the payer",
                "payer-name": "Name of the payer",
                "profiteer": (integer) "ID of the profiteer",
                "profiteer-name:" "Name of the profiteer",
            }, ...
        ]